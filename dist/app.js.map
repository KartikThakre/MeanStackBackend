{"version":3,"sources":["../src/app.js"],"names":["mongoose","Promise","global","connect","useNewUrlParser","useUnifiedTopology","app","Port","use","express","json","urlencoded","extended","router","req","res","next","error","Error","message","status","listen","console","log"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA;;;;;;AAGA;AACAA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;AACAD,mBAASG,OAAT,CAAiB,qCAAjB,EAAyD,EAACC,iBAAiB,IAAlB,EAAwBC,oBAAoB,IAA5C,EAAzD;AACA,IAAMC,MAAM,wBAAZ;AACA,IAAMC,OAAO,IAAb;;AAEA;AACAD,IAAIE,GAAJ,CAAQC,kBAAQC,IAAR,EAAR;AACAJ,IAAIE,GAAJ,CAAQC,kBAAQE,UAAR,CAAmB,EAACC,UAAW,IAAZ,EAAnB,CAAR;;AAEA;AACAN,IAAIE,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACA;AACAF,IAAIE,GAAJ,CAAQ,MAAR,EAAeK,aAAf;;AAEA;AACAP,IAAIE,GAAJ,CAAQ,UAACM,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAgB;AACpB,QAAMC,QAAQ,IAAIC,KAAJ,CAAU,WAAV,CAAd;AACAD,UAAME,OAAN,GAAgB,eAAhB;AACAF,UAAMG,MAAN,GAAe,GAAf;AACAJ,SAAKC,KAAL;AACH,CALD;;AAQA;AACAX,IAAIE,GAAJ,CAAQ,UAACS,KAAD,EAAOH,GAAP,EAAWC,GAAX,EAAeC,IAAf,EAAwB;AAC5BD,QAAIK,MAAJ,CAAWH,MAAMG,MAAN,IAAgB,GAA3B;AACA,WAAOL,IAAIL,IAAJ,CAAS;AACZO,eAAQ;AACJE,qBAAUF,MAAME;AADZ;AADI,KAAT,CAAP;AAKH,CAPD;;AAWAb,IAAIe,MAAJ,CAAWd,IAAX,EAAkB,YAAI;AAClBe,YAAQC,GAAR,+BAAwChB,IAAxC;AACH,CAFD","file":"app.js","sourcesContent":["import express from 'express';\r\nimport {router} from './api/config/route';\r\nimport mongoose from 'mongoose';\r\nimport logger from 'morgan';\r\n\r\n\r\n//MongoDataBase Connection\r\nmongoose.Promise = global.Promise;\r\nmongoose.connect('mongodb://localhost/invoice-builder' , {useNewUrlParser: true, useUnifiedTopology: true});\r\nconst app = express();\r\nconst Port = 3200;\r\n\r\n//useing the bodyparser\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended : true}));\r\n\r\n//useing httprequest useing morgan middleware\r\napp.use(logger('dev'));\r\n//For Route Purpose\r\napp.use('/api',router);\r\n\r\n//adding global middleware\r\napp.use((req,res,next)=>{\r\n    const error = new Error('Not Found');\r\n    error.message = \"Invalid Route\";\r\n    error.status = 404;\r\n    next(error);\r\n})\r\n\r\n\r\n//Add BodyParser for undefined body error\r\napp.use((error,req,res,next) => {\r\n    res.status(error.status || 500);\r\n    return res.json({\r\n        error : {\r\n            message : error.message,\r\n        },\r\n    });\r\n});\r\n\r\n\r\n\r\napp.listen(Port , ()=>{\r\n    console.log(`Server is runing at Port ${Port}`);\r\n});\r\n\r\n\r\n"]}